{"version":3,"sources":["app/components/Keyboard.tsx","app/components/SourceLink.tsx","app/components/ScreenHeader.tsx","app/components/Button.tsx","app/components/TextBlock.tsx","app/GameScreen.tsx","app/gameUtils.ts","app/constants/gameConstants.ts","App.tsx"],"names":["SpecialKeyboardKeys","HOME_URL","styles","StyleSheet","create","container","position","right","top","subtitle","color","fontWeight","fontSize","SourceLink","View","style","Text","accessibilityRole","href","onPress","Platform","OS","Linking","openURL","undefined","paddingVertical","alignItems","justifyContent","title","ScreenHeader","button","paddingHorizontal","borderWidth","borderRadius","borderColor","cta","active","elevation","Button","props","useState","isPressedIn","setIsPressedIn","Pressable","onPressIn","onPressOut","TextBlockState","keySequence","DELETE","GUESS","row","flexDirection","marginBottom","cell","padding","margin","cellDisabled","text","textDisabled","Keyboard","onKeyPress","disabledKeyList","map","rowIndex","key","isDisabled","includes","disabled","ColorMap","CORRECT","POSSIBLE","INCORRECT","width","height","TextBlock","state","backgroundColor","toUpperCase","BOARD_TEMPLATE","board","i","push","Array","fill","getInitialBoard","mb12","mh2","marginHorizontal","fg1","flexGrow","textWhite","bottomContainer","score","buttonRow","buttonSpacer","GameScreen","guessList","setGuessList","inputWord","setInputWord","gameOver","setGameOver","disabledLetters","setDisabledLetters","wordToGuess","useRef","useEffect","current","len","fiveLetterWords","length","randomIndex","Math","floor","random","getRandomWord","guessLen","list","forEach","word","split","letter","console","log","useCallback","prev","slice","callback","event","test","window","addEventListener","removeEventListener","wordleEmoji","useMemo","output","line","char","colIndex","getWordleEmoji","_","guessLetter","letterToShow","selectable","Clipboard","setString","App","SafeAreaView","flex"],"mappings":"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","file":"static/js/app.72113671.chunk.js","sourcesContent":["import React from 'react';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface KeyboardProps {\n  onKeyPress(char: string): void;\n  disabledKeyList: string[];\n}\n\nexport enum SpecialKeyboardKeys {\n  DELETE = 'delete',\n  GUESS = 'guess',\n}\n\nconst keySequence: string[][] = [\n  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n  ['Z', 'X', 'C', 'V', 'B', 'N', 'M'],\n  [SpecialKeyboardKeys.DELETE, SpecialKeyboardKeys.GUESS],\n];\n\nconst Keyboard = (props: KeyboardProps) => {\n  const {onKeyPress, disabledKeyList} = props;\n\n  return (\n    <>\n      {keySequence.map((row, rowIndex) => {\n        return (\n          <View key={'key-row-' + rowIndex} style={styles.row}>\n            {row.map(key => {\n              const isDisabled = disabledKeyList.includes(key);\n              return (\n                <Pressable\n                  key={key}\n                  disabled={isDisabled}\n                  onPress={() => onKeyPress(key)}>\n                  <View\n                    style={[styles.cell, isDisabled && styles.cellDisabled]}>\n                    <Text\n                      style={[styles.text, isDisabled && styles.textDisabled]}>\n                      {key}\n                    </Text>\n                  </View>\n                </Pressable>\n              );\n            })}\n          </View>\n        );\n      })}\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n    marginBottom: 5,\n  },\n  cell: {\n    padding: 5,\n    paddingHorizontal: 8,\n    margin: 4,\n    borderRadius: 2,\n    borderWidth: 1,\n    borderColor: 'white',\n  },\n  cellDisabled: {\n    borderColor: 'grey',\n  },\n  text: {\n    color: 'white',\n    fontSize: 16,\n  },\n  textDisabled: {\n    color: 'grey',\n  },\n});\n\nexport default Keyboard;\n","import React from 'react';\nimport {Linking, Platform, StyleSheet, Text, View} from 'react-native';\n\nconst HOME_URL = 'https://github.com/LonelyCpp/react-native-wordle';\n\nconst SourceLink = () => {\n  return (\n    <View style={styles.container}>\n      <Text\n        style={styles.subtitle}\n        accessibilityRole=\"link\"\n        // @ts-ignore (web only prop)\n        href={HOME_URL}\n        onPress={\n          Platform.OS !== 'web' ? () => Linking.openURL(HOME_URL) : undefined\n        }>\n        (github)\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    right: 12,\n    top: 16,\n  },\n  subtitle: {\n    color: '#5998c5',\n    fontWeight: '400',\n    fontSize: 16,\n  },\n});\n\nexport default SourceLink;\n","import React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst ScreenHeader = () => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Wordle</Text>\n      <Text style={styles.subtitle}>react native</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    color: '#df928e',\n    fontWeight: '200',\n    fontSize: 32,\n  },\n  subtitle: {\n    color: '#91e5f6',\n    fontWeight: '400',\n    fontSize: 12,\n  },\n});\n\nexport default ScreenHeader;\n","import React, {useState} from 'react';\nimport {Pressable, StyleSheet, Text, View} from 'react-native';\n\ninterface ButtonProps {\n  cta: string;\n  onPress(): void;\n}\n\nconst Button = (props: ButtonProps) => {\n  const {cta, onPress} = props;\n\n  const [isPressedIn, setIsPressedIn] = useState(false);\n\n  return (\n    <Pressable\n      onPress={onPress}\n      onPressIn={() => setIsPressedIn(true)}\n      onPressOut={() => setIsPressedIn(false)}>\n      <View style={[styles.button, isPressedIn && styles.active]}>\n        <Text style={styles.cta}>{cta}</Text>\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: '#fff',\n  },\n  cta: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  active: {\n    elevation: 2,\n  },\n});\n\nexport default Button;\n","import React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nexport enum TextBlockState {\n  GUESS = 'guess',\n  CORRECT = 'correct',\n  POSSIBLE = 'possible',\n  INCORRECT = 'incorrect',\n}\n\nconst ColorMap: Record<TextBlockState, string> = {\n  [TextBlockState.GUESS]: 'transparent',\n  [TextBlockState.CORRECT]: '#76b041',\n  [TextBlockState.POSSIBLE]: '#FFC914',\n  [TextBlockState.INCORRECT]: '#8b939c',\n};\n\ninterface TextBlockProps {\n  text: string;\n  state: TextBlockState;\n}\n\nconst TextBlock = (props: TextBlockProps) => {\n  const {text, state} = props;\n\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: ColorMap[state],\n        },\n      ]}>\n      <Text style={styles.text}>{text.toUpperCase()}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 40,\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 4,\n    borderColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n});\n\nexport default TextBlock;\n","import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {StyleSheet, Text, View, Clipboard, Platform} from 'react-native';\nimport Button from './components/Button';\nimport Keyboard, {SpecialKeyboardKeys} from './components/Keyboard';\nimport TextBlock, {TextBlockState} from './components/TextBlock';\nimport {MAX_GUESSES, MAX_WORD_LEN} from './constants/gameConstants';\nimport {getInitialBoard, getRandomWord, getWordleEmoji} from './gameUtils';\n\nconst BOARD_TEMPLATE = getInitialBoard();\n\nconst GameScreen = () => {\n  const [guessList, setGuessList] = useState<string[]>([]);\n  const [inputWord, setInputWord] = useState<string>('');\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [disabledLetters, setDisabledLetters] = useState<string[]>([]);\n\n  const wordToGuess = useRef<string>('xxxxx');\n\n  useEffect(() => {\n    if (gameOver === false) {\n      wordToGuess.current = getRandomWord();\n      setInputWord('');\n      setGuessList([]);\n    }\n  }, [gameOver]);\n\n  useEffect(() => {\n    const guessLen = guessList.length;\n    if (guessList[guessLen - 1] === wordToGuess.current) {\n      setGameOver(true);\n    } else if (guessLen === MAX_GUESSES) {\n      setGameOver(true);\n    }\n  }, [guessList]);\n\n  useEffect(() => {\n    const list: string[] = [];\n\n    guessList.forEach(word => {\n      word.split('').forEach(letter => {\n        console.log({letter});\n        if (!wordToGuess.current.includes(letter)) {\n          list.push(letter);\n        }\n      });\n    });\n\n    setDisabledLetters(list);\n  }, [guessList]);\n\n  const onKeyPress = useCallback(\n    (key: string) => {\n      if (key === SpecialKeyboardKeys.DELETE) {\n        setInputWord(prev => prev.slice(0, -1));\n      } else if (key === SpecialKeyboardKeys.GUESS) {\n        setGuessList(prev => [...prev, inputWord.toUpperCase()]);\n        setInputWord('');\n      } else if (key.length === 1) {\n        setInputWord(prev => {\n          if (prev.length < MAX_WORD_LEN && !disabledLetters.includes(key)) {\n            return prev + key;\n          }\n\n          return prev;\n        });\n      }\n    },\n    [disabledLetters, inputWord],\n  );\n\n  useEffect(() => {\n    if (Platform.OS === 'web') {\n      const callback = (event: KeyboardEvent) => {\n        const key = event.key;\n\n        if (/^[A-Za-z]$/.test(key)) {\n          onKeyPress(key.toUpperCase());\n        } else if (key === 'Enter' && inputWord.length === MAX_WORD_LEN) {\n          onKeyPress(SpecialKeyboardKeys.GUESS);\n        } else if (key === 'Backspace') {\n          onKeyPress(SpecialKeyboardKeys.DELETE);\n        }\n      };\n\n      window.addEventListener('keyup', callback);\n      return () => window.removeEventListener('keyup', callback);\n    }\n  }, [inputWord.length, onKeyPress]);\n\n  const wordleEmoji: string = useMemo(() => {\n    if (!gameOver) {\n      return '';\n    }\n\n    return getWordleEmoji(wordToGuess.current, guessList);\n  }, [gameOver, guessList]);\n\n  return (\n    <View style={styles.fg1}>\n      {BOARD_TEMPLATE.map((row, rowIndex) => {\n        return (\n          <View key={`row-${rowIndex}`} style={styles.row}>\n            {row.map((_, colIndex) => {\n              const guessLetter = guessList[rowIndex]?.[colIndex];\n              let state: TextBlockState = TextBlockState.GUESS;\n\n              if (guessLetter === undefined) {\n                state = TextBlockState.GUESS;\n              } else if (guessLetter === wordToGuess.current[colIndex]) {\n                state = TextBlockState.CORRECT;\n              } else if (wordToGuess.current.includes(guessLetter)) {\n                state = TextBlockState.POSSIBLE;\n              } else {\n                state = TextBlockState.INCORRECT;\n              }\n\n              const letterToShow =\n                rowIndex === guessList.length\n                  ? inputWord[colIndex]\n                  : guessLetter;\n\n              return (\n                <View style={styles.mh2} key={`col-${colIndex}`}>\n                  <TextBlock text={letterToShow || ''} state={state} />\n                </View>\n              );\n            })}\n          </View>\n        );\n      })}\n\n      <View style={styles.bottomContainer}>\n        {gameOver ? (\n          <>\n            <Text style={[styles.textWhite, styles.mb12]}>Game Over!</Text>\n            <Text style={[styles.textWhite, styles.mb12]}>\n              The word was : {wordToGuess.current}\n            </Text>\n\n            <Text style={styles.textWhite} selectable>\n              {wordleEmoji}\n            </Text>\n\n            <View style={styles.buttonRow}>\n              <Button\n                cta=\"Copy Score\"\n                onPress={() => Clipboard.setString(wordleEmoji)}\n              />\n              <View style={styles.buttonSpacer} />\n              <Button cta=\"Play Again\" onPress={() => setGameOver(false)} />\n            </View>\n          </>\n        ) : (\n          <Keyboard\n            disabledKeyList={[\n              ...disabledLetters,\n              inputWord.length !== MAX_WORD_LEN\n                ? SpecialKeyboardKeys.GUESS\n                : '',\n            ]}\n            onKeyPress={onKeyPress}\n          />\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  mb12: {\n    marginBottom: 12,\n  },\n  mh2: {\n    marginHorizontal: 2,\n  },\n  fg1: {\n    flexGrow: 1,\n  },\n  textWhite: {\n    color: '#fff',\n    fontSize: 22,\n  },\n  row: {\n    marginBottom: 4,\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  bottomContainer: {\n    flexGrow: 1,\n    marginBottom: 16,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n  },\n  score: {\n    color: '#fff',\n    fontSize: 14,\n    marginBottom: 12,\n  },\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  buttonSpacer: {\n    width: 12,\n  },\n});\n\nexport default GameScreen;\n","import fiveLetterWords from './constants/fiveLetterWords.json';\nimport {MAX_GUESSES} from './constants/gameConstants';\n\nexport const getInitialBoard = (): string[][] => {\n  const board: string[][] = [];\n  for (let i = 0; i < 6; i++) {\n    board.push(new Array(5).fill(''));\n  }\n\n  return board;\n};\n\nexport const getRandomWord = (): string => {\n  const len = fiveLetterWords.length;\n  const randomIndex = Math.floor(Math.random() * 100000) % len;\n  return fiveLetterWords[randomIndex].toUpperCase();\n};\n\nexport const getWordleEmoji = (word: string, guessList: string[]): string => {\n  const hasWon = guessList[guessList.length - 1] === word;\n\n  let output = `Wordle ${hasWon ? guessList.length : 'x'}/${MAX_GUESSES}\\n\\n`;\n\n  guessList.forEach(row => {\n    let line = '';\n\n    row.split('').forEach((char, colIndex) => {\n      if (char === word[colIndex]) {\n        line += '🟩';\n      } else if (word.includes(char)) {\n        line += '🟨';\n      } else {\n        line += '⬜️';\n      }\n    });\n\n    output += line + '\\n';\n  });\n\n  return output;\n};\n","export const MAX_GUESSES = 6;\nexport const MAX_WORD_LEN = 5;\n","import React from 'react';\nimport {SafeAreaView, StyleSheet, View} from 'react-native';\nimport SourceLink from './app/components/SourceLink';\nimport ScreenHeader from './app/components/ScreenHeader';\nimport GameScreen from './app/GameScreen';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <SafeAreaView style={styles.container}>\n        <ScreenHeader />\n        <GameScreen />\n        <SourceLink />\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n});\n"],"sourceRoot":""}